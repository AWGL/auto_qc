"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 2.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

deploy_location = 'gen01'

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

CONFIG_PATH = '/home/niamh/auto_qc/config/config_local.yaml'
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'r5()y@mri3mn@*24#$n#h2jdehru85g@6vo$oe975nd@(h7ql*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', '10.59.210.245']


# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',
	'qc_database.apps.QcDatabaseConfig',
	'crispy_forms',
	'auditlog',
	'sample_sheet.apps.SampleSheetConfig',
]
MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware',
	'auditlog.middleware.AuditlogMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'mysite.wsgi.application'


# Database

if deploy_location == 'gen01':

	DB_PASSWORD_FILE = '/export/home/webapps/password.txt'
	with open(DB_PASSWORD_FILE) as f:
		db_password = f.readline().strip()


	DATABASES = {
		'default': {
			'ENGINE': 'django.db.backends.postgresql_psycopg2',
			'NAME': 'auto_qc',
			'USER': 'auto_qc_user',
			'PASSWORD': db_password,
			'HOST': 'localhost',
			'PORT': '',
		}
	}

else:

	DATABASES = {
	'default': {
		'ENGINE': 'django.db.backends.sqlite3',
		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
	}
	}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},

]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
	os.path.join(BASE_DIR, "static"),
]

CRISPY_TEMPLATE_PACK = 'bootstrap4'

LOGIN_REDIRECT_URL = 'home_auto_qc'
LOGIN_URL = '/login/'


MESSAGE_SLACK = False
SLACK_URL_FILE = '/home/webapps/auto_qc/qc_database/utils/slack_url.txt'

# load in slack url if slack messages are turned on
if MESSAGE_SLACK:
	with open(SLACK_URL_FILE) as f:
		SLACK_URL = f.read()


# parse hpo ids into a dict for querying
HPO_FILEPATH = 'sample_sheet/exomiser_hpo/hp.obo'

# empty hpo dict
HPO_TERMS_DICT = {}

with open(HPO_FILEPATH) as file:
		
	for line in file:
		
		if line.startswith('id:'):
						
			hpo_id = line.split('id:')[1].strip()
						
			name = None
			
			HPO_TERMS_DICT[hpo_id] = None
		
		if line.startswith('name:'):
			
			name = line.split('name:')[1].strip()
			
			HPO_TERMS_DICT[hpo_id] = name
			
		if line.startswith('alt_id:'):
			
			alt_id = line.split('alt_id:')[1].strip()
			
			HPO_TERMS_DICT[alt_id] = name
